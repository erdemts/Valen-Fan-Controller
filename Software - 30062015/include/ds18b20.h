/*Библиотека обслуживание сети датчиков температуры DS18B20.
Протестировано на компиляторах
HI-TECH C Compiler for PIC18 MCUs (PRO Mode)  V9.80
HI-TECH C Compiler for PIC10/12/16 MCUs (PRO Mode)  V9.83
Автор
Геннадий Чернов, Днепропетровск 2011
Gennady Chernov, Dnepropetrovsk 2011
версия v1.01.
Email: gena.chernov@gmail.com
*/

//--------------------------------------------------------------------------------------- 

void Level_High (void);		//
void Level_Low (void);		//
void Waiting_WR (void);		//
char CRC_Bits (int data);	//
char Reset_Dallas (void);	//
char Dreceive (void);		//
void Dsend (char COM_REG);	//
char Celsio (void);			//
char SeachROM (void);		//
char SaveROM (void);		// программа установки датчиков
void EraseROM (void);		//
char Test_DT (void);		//

//--------------------------------------------------------------------------------------- 
// определения
#define		TRISDAL	TRISA1					// регистр управления порта ДАЛЛАСА
#define		DALLAS	PORTAbits.RA1			// шина связи с ДАЛЛАСОМ1

#define		COLDAT	4						// разрешенное количество датчиков в системе
#define		NACHAD	(0xFF-(8*COLDAT))+1		// адрес начала расположения адресов датчиков температуры в EEPROM

#define _XTAL_FREQ 40000000 // Наша тактовая 40 Mh
//--------------------------------------------------------------------------------------- 

//флаги
volatile bit CONV; 			// флаг используется в прерываниях
volatile char convert;		// переменная периода конвертирования температуры используется в прерываниях

char test;					// тестовая
//--------------------------------------------------------------------------------------- 
//переменные
char crc, 					//crc
coldachu,					//количество датчиков установленых(записанных в EEPROM)
naydendatch, 				//найдено на настоящий момент.
posled_nesoot,				//значение последнего несоответствия при поиске РОМ
error_con;					//задержка аварии по обрыву линии
char bufdt[8], 				//буфер для чтения данных от DS18B20
erroDT[COLDAT]; 			//фильтр ошибок датчиков температуры (начальная установка ошибка)	

int TEMPDAT[COLDAT]; 		//массив температур датчиков;

bit CON; 					//флаги режима конвертирования температуры
bit TESTDT;					//режим тестирование датчиков температуры (нет задежки на аварию)
bit ET00,ET01,ET02,ET03,ET04,ET05,ET06,ET07,
ET08,ET09,ET10,ET11,ET12,ET13,ET14,ET15; //флаги ошибок датчиков

//------------------------------------------------------------------------------------	
/*
Для подключения библиотеки необходимо!!!

1. Указать, к какому порту подключена шина данных датчика
для этого необходимо сконфигурировать строки в этом файле

#define		TRISDAL	TRISA1					// регистр управления порта ДАЛЛАСА
#define		DALLAS	PORTAbits.RA1			// шина связи с ДАЛЛАСОМ1

2. Правильно задать тактовую частоту
для этого сконфигурируют строку в этом файле

#define _XTAL_FREQ 40000000 // Наша тактовая 40 Mh

3.Необходимо организовать прерывания и в цикл прерываний вставить
отсчет времени конвертирования температуры датчиков. Формируется длительность 750 мкСек.
инициализация переменной convert=57; 57 это константа зависит от периода прерываний.
Рекомендуется формировать цикл прерывание с периодом 0,1 секунда 
(хотя может быть любой период, лишь бы можно было 750-800 мкСек описать переменно типа char),
тогда константа может быть в пределах 8-9.

		if(CONV==1)
		{
			if(convert--==0)
			{
				convert=57; 		// формирование интервала конвертирования
				CONV=0;				//57 - надо изменить
			}
		}
				
4.Для автоматического поиска, подключения датчиков, замены неисправных датчиков на исправные,
а также добавления новых датчиков используйте в начале программы функцию Test_DT();

5.Обратите внимание функция Test_DT() отключает фильтр помех. Для включения выполните после функции
команду TESTDT=1;

6.Количество подключаемых датчиков максимально 16. Ограничение в строке
#define		COLDAT	4						// разрешенное количество датчиков в системе 4

7.Для работы могут быть использованы только контроллеры, имеющие на борту EEPROM. Так-как 
адреса датчиков хранятся в нем. Располагаются адреса от конца памяти. 
По умолчанию подразумевается, что объем памяти 256 байт.

8.Для постоянного измерения температуры необходимо в основной цикл вставить функцию Celsio();
Чтение температуры из массива TEMPDAT[]. Неисправность датчика можно контролировать по флагам
ETхх где хх-номер датчика 0-15.


//========================================================================================

*/
